{"version":3,"sources":["Components/UI/Forms/Input/Input.js","Containers/Auth/Auth.js"],"names":["input","props","inputElement","inputClasses","valid","push","touched","elementType","onChange","changed","className","join","elementConfig","value","options","map","option","key","displayValue","label","Auth","state","controls","email","type","placeholder","validation","required","isEmail","password","minLength","isSignUp","switchAuthModeHandler","setState","prevState","inputChangeHandler","event","controlName","updatedControls","updateObject","target","checkValidity","submitHandler","preventDefault","onAuth","this","building","authRedirectPath","onSetRedirectPath","formElementArray","id","config","form","formElement","loading","errorMsg","error","message","authRedirect","isAuth","to","Fragment","onSubmit","onClick","Component","connect","auth","token","burgerBuilder","dispatch","actions"],"mappings":"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","file":"static/js/3.a9dd566b.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst input = (props) => {\r\n  let inputElement = null;\r\n  const inputClasses = [\"form-control-lg form-control\"];\r\n  if (props.valid) {\r\n    inputClasses.push(\" is-valid\");\r\n  } else if (props.touched) {\r\n    inputClasses.push(\"is-invalid\");\r\n  }\r\n  switch (props.elementType) {\r\n    case \"input\":\r\n      inputElement = (\r\n        <input\r\n          onChange={props.changed}\r\n          className={inputClasses.join(\" \")}\r\n          {...props.elementConfig}\r\n          value={props.value}\r\n        />\r\n      );\r\n      break;\r\n    case \"select\":\r\n      inputElement = (\r\n        <select className={inputClasses.join(\" \")} value={props.value}>\r\n          {props.elementConfig.options.map((option) => (\r\n            <option key={option.value} value={option.value}>\r\n              {option.displayValue}\r\n            </option>\r\n          ))}\r\n        </select>\r\n      );\r\n      break;\r\n    case \"textarea\":\r\n      inputElement = (\r\n        <textarea\r\n          className={inputClasses.join(\" \")}\r\n          {...props.elementConfig}\r\n          value={props.value}\r\n        />\r\n      );\r\n      break;\r\n    default:\r\n      inputElement = (\r\n        <input\r\n          onChange={props.changed}\r\n          className={inputClasses.join(\" \")}\r\n          {...props.elementConfig}\r\n          value={props.value}\r\n        />\r\n      );\r\n  }\r\n\r\n  return (\r\n    <div className=\"form-group\">\r\n      <label className=\"lead\">{props.label}</label>\r\n      {inputElement}\r\n    </div>\r\n  );\r\n};\r\nexport default input;\r\n","import React, { Component } from \"react\";\r\nimport Input from \"../../Components/UI/Forms/Input/Input\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport \"../../Assets/styles.css\";\r\nimport { connect } from \"react-redux\";\r\nimport * as actions from \"../../store/actions/index\";\r\nimport Spinner from \"../../Components/UI/Spinner/Spinner\";\r\nimport { updateObject, checkValidity } from \"../../shared/utility\";\r\n\r\nclass Auth extends Component {\r\n  state = {\r\n    controls: {\r\n      email: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"email\",\r\n          placeholder: \"Email Address\",\r\n        },\r\n        value: \"\",\r\n        validation: {\r\n          required: true,\r\n          isEmail: true,\r\n        },\r\n        valid: false,\r\n        touched: false,\r\n      },\r\n      password: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"password\",\r\n          placeholder: \"Password\",\r\n        },\r\n        value: \"\",\r\n        validation: {\r\n          required: true,\r\n          minLength: 6,\r\n        },\r\n        valid: false,\r\n        touched: false,\r\n      },\r\n    },\r\n    isSignUp: true,\r\n  };\r\n\r\n  //METHODS\r\n\r\n  componentDidMount() {\r\n    if (!this.props.building && this.props.authRedirectPath !== \"/\") {\r\n      this.props.onSetRedirectPath();\r\n    }\r\n  }\r\n\r\n  switchAuthModeHandler = () => {\r\n    this.setState((prevState) => {\r\n      return { isSignUp: !prevState.isSignUp };\r\n    });\r\n  };\r\n\r\n  inputChangeHandler = (event, controlName) => {\r\n    const updatedControls = updateObject(this.state.controls, {\r\n      [controlName]: updateObject(this.state.controls[controlName], {\r\n        value: event.target.value,\r\n        valid: checkValidity(\r\n          event.target.value,\r\n          this.state.controls[controlName].validation\r\n        ),\r\n        touched: true,\r\n      }),\r\n    });\r\n    this.setState({ controls: updatedControls });\r\n  };\r\n\r\n  //CHECKING VALIDITY\r\n  submitHandler = (event) => {\r\n    event.preventDefault();\r\n    this.props.onAuth(\r\n      this.state.controls.email.value,\r\n      this.state.controls.password.value,\r\n      this.state.isSignUp\r\n    );\r\n  };\r\n\r\n  render() {\r\n    const formElementArray = [];\r\n    for (let key in this.state.controls) {\r\n      formElementArray.push({\r\n        id: key,\r\n        config: this.state.controls[key],\r\n      });\r\n    }\r\n\r\n    let form = formElementArray.map((formElement) => (\r\n      <Input\r\n        key={formElement.id}\r\n        elementType={formElement.config.elementType}\r\n        elementConfig={formElement.config.elementConfig}\r\n        value={formElement.value}\r\n        touched={formElement.config.touched}\r\n        valid={formElement.config.valid}\r\n        changed={(event) => this.inputChangeHandler(event, formElement.id)}\r\n      ></Input>\r\n    ));\r\n\r\n    if (this.props.loading) {\r\n      form = <Spinner />;\r\n    }\r\n\r\n    let errorMsg = null;\r\n    if (this.props.error) {\r\n      errorMsg = <p>{this.props.error.message}</p>;\r\n    }\r\n\r\n    let authRedirect = null;\r\n    if (this.props.isAuth) {\r\n      authRedirect = <Redirect to={this.props.authRedirectPath}></Redirect>;\r\n    }\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <div className=\"d-flex flex-column justify-content-center align-items-center mt-8\">\r\n          {authRedirect}\r\n          {errorMsg}\r\n          <form className=\"\" onSubmit={this.submitHandler}>\r\n            {form}\r\n            <div className=\"d-flex justify-content-around\">\r\n              <button\r\n                className=\"btn btn-danger\"\r\n                onClick={this.switchAuthModeHandler}\r\n              >\r\n                SIGN IN\r\n              </button>\r\n              <button className=\"btn btn-success\">SIGN UP</button>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    loading: state.auth.loading,\r\n    error: state.auth.error,\r\n    isAuth: state.auth.token !== null,\r\n    building: state.burgerBuilder.building,\r\n    authRedirectPath: state.auth.authRedirectPath,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onAuth: (email, password, isSignUp) =>\r\n      dispatch(actions.auth(email, password, isSignUp)),\r\n    onSetRedirectPath: () => dispatch(actions.setAuthRedirectPath(\"/\")),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);\r\n"],"sourceRoot":""}