{"version":3,"sources":["Components/Order/Order.js","Containers/Orders/Orders.js"],"names":["order","props","ingredients","ingName","push","name","amount","ingredientOutput","map","ig","className","price","toFixed","Orders","this","onFetchOrders","token","userId","orders","Spinner","loading","length","Order","key","id","console","log","class","role","Component","connect","state","auth","dispatch","actions","withErrorHandler","axios"],"mappings":"mMA6BeA,G,MA3BD,SAACC,GACb,IAAIC,EAAc,GAClB,IAAK,IAAIC,KAAWF,EAAMC,YACxBA,EAAYE,KAAK,CAAEC,KAAMF,EAASG,OAAQL,EAAMC,YAAYC,KAG9D,IAAMI,EAAmBL,EAAYM,KAAI,SAACC,GACxC,OACE,0BAAMC,UAAU,QACbD,EAAGJ,KADN,IACaI,EAAGH,OADhB,IACyB,QAI7B,OACE,yBAAKI,UAAU,gCACb,yBAAKA,UAAU,eACb,yBAAKA,UAAU,8CAAf,eAEF,yBAAKA,UAAU,aACb,2CAAiBH,GACjB,qCACS,uCAAaN,EAAMU,MAAMC,QAAQ,S,gCCb5CC,E,kLAEFC,KAAKb,MAAMc,cAAcD,KAAKb,MAAMe,MAAOF,KAAKb,MAAMgB,U,+BAItD,IAAIC,EAAS,kBAACC,EAAA,EAAD,MAiBb,OAhBKL,KAAKb,MAAMmB,SAAWN,KAAKb,MAAMiB,OAAOG,OAAO,IAClDH,EAASJ,KAAKb,MAAMiB,OAAOV,KAAI,SAACR,GAAD,OAC7B,kBAACsB,EAAD,CACEC,IAAKvB,EAAMwB,GACXtB,YAAaF,EAAME,YACnBS,MAAOX,EAAMW,WAGc,GAA5BG,KAAKb,MAAMiB,OAAOG,SACnBI,QAAQC,IAAI,gBACZR,EAAS,yBAAKS,MAAM,yBAAyBC,KAAK,SAAzC,6CACiC,6BADjC,0DAMN,yBAAKlB,UAAU,QAAQQ,O,GAvBbW,aA2CNC,uBAhBS,SAACC,GACvB,MAAO,CACLb,OAAQa,EAAM/B,MAAMkB,OACpBE,QAASW,EAAM/B,MAAMoB,QACrBJ,MAAOe,EAAMC,KAAKhB,MAClBC,OAAQc,EAAMC,KAAKf,WAII,SAACgB,GAC1B,MAAO,CACLlB,cAAe,SAACC,EAAOC,GAAR,OACbgB,EAASC,IAAoBlB,EAAOC,QAI3Ba,CAGbK,YAAiBtB,EAAQuB","file":"static/js/4.c5427dca.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst order = (props) => {\r\n  let ingredients = [];\r\n  for (let ingName in props.ingredients) {\r\n    ingredients.push({ name: ingName, amount: props.ingredients[ingName] });\r\n  }\r\n\r\n  const ingredientOutput = ingredients.map((ig) => {\r\n    return (\r\n      <span className=\"lead\">\r\n        {ig.name}({ig.amount}){\" \"}\r\n      </span>\r\n    );\r\n  });\r\n  return (\r\n    <div className=\"card bg-light text-dark mt-4\">\r\n      <div className=\"card-header\">\r\n        <div className=\"card-title text-center h5 font-weight-bold\">Your Order</div>\r\n      </div>\r\n      <div className=\"card-body\">\r\n        <p>Ingredients: {ingredientOutput}</p>\r\n        <p>\r\n          Price: <strong>USD {props.price.toFixed(2)}</strong>\r\n        </p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default order;\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport \"./Orders.css\";\r\n\r\nimport Order from \"../../Components/Order/Order\";\r\nimport axios from \"../../axios-orders\";\r\nimport withErrorHandler from \"../../HOC/WithErrorHandler/WithErrorHandler\";\r\nimport * as actions from \"../../store/actions/index\";\r\nimport Spinner from \"../../Components/UI/Spinner/Spinner\";\r\n\r\nclass Orders extends Component {\r\n  componentDidMount() {\r\n    this.props.onFetchOrders(this.props.token, this.props.userId);\r\n  }\r\n\r\n  render() {\r\n    let orders = <Spinner />;\r\n    if (!this.props.loading && this.props.orders.length>0) {\r\n      orders = this.props.orders.map((order) => (\r\n        <Order\r\n          key={order.id}\r\n          ingredients={order.ingredients}\r\n          price={order.price}\r\n        />\r\n      ));\r\n      if(this.props.orders.length == 0){\r\n        console.log(\"No orders!!!\");\r\n        orders = <div class=\"alert alert-danger m-4\" role=\"alert\">\r\n        There are currently no order in your name!<br></br>\r\n        Please order our burger to see your orders over here\r\n        </div>\r\n      }\r\n    }\r\n    return <div className=\"mt-8\">{orders}</div>;\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    orders: state.order.orders,\r\n    loading: state.order.loading,\r\n    token: state.auth.token,\r\n    userId: state.auth.userId,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onFetchOrders: (token, userId) =>\r\n      dispatch(actions.fetchOrders(token, userId)),\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(withErrorHandler(Orders, axios));\r\n"],"sourceRoot":""}